// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.message.BulletState', null, global);
goog.exportSymbol('proto.message.CreateBullet', null, global);
goog.exportSymbol('proto.message.DirChange', null, global);
goog.exportSymbol('proto.message.GameCount', null, global);
goog.exportSymbol('proto.message.GameInit', null, global);
goog.exportSymbol('proto.message.GameState', null, global);
goog.exportSymbol('proto.message.PlayerState', null, global);
goog.exportSymbol('proto.message.Wrapper', null, global);
goog.exportSymbol('proto.message.Wrapper.MessagetypeCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.Wrapper = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.message.Wrapper.oneofGroups_);
};
goog.inherits(proto.message.Wrapper, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.Wrapper.displayName = 'proto.message.Wrapper';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.GameInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.GameInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.GameInit.displayName = 'proto.message.GameInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.DirChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.DirChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.DirChange.displayName = 'proto.message.DirChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.GameState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.message.GameState.repeatedFields_, null);
};
goog.inherits(proto.message.GameState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.GameState.displayName = 'proto.message.GameState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.PlayerState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.PlayerState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.PlayerState.displayName = 'proto.message.PlayerState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.CreateBullet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.CreateBullet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.CreateBullet.displayName = 'proto.message.CreateBullet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.BulletState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.BulletState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.BulletState.displayName = 'proto.message.BulletState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.message.GameCount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.message.GameCount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.message.GameCount.displayName = 'proto.message.GameCount';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.message.Wrapper.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.message.Wrapper.MessagetypeCase = {
  MESSAGETYPE_NOT_SET: 0,
  DIRCHANGE: 1,
  CREATEBULLET: 2,
  GAMESTATE: 3,
  GAMECOUNT: 4,
  GAMEINIT: 5
};

/**
 * @return {proto.message.Wrapper.MessagetypeCase}
 */
proto.message.Wrapper.prototype.getMessagetypeCase = function() {
  return /** @type {proto.message.Wrapper.MessagetypeCase} */(jspb.Message.computeOneofCase(this, proto.message.Wrapper.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.Wrapper.prototype.toObject = function(opt_includeInstance) {
  return proto.message.Wrapper.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.Wrapper} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Wrapper.toObject = function(includeInstance, msg) {
  var f, obj = {
dirchange: (f = msg.getDirchange()) && proto.message.DirChange.toObject(includeInstance, f),
createbullet: (f = msg.getCreatebullet()) && proto.message.CreateBullet.toObject(includeInstance, f),
gamestate: (f = msg.getGamestate()) && proto.message.GameState.toObject(includeInstance, f),
gamecount: (f = msg.getGamecount()) && proto.message.GameCount.toObject(includeInstance, f),
gameinit: (f = msg.getGameinit()) && proto.message.GameInit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.Wrapper}
 */
proto.message.Wrapper.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.Wrapper;
  return proto.message.Wrapper.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.Wrapper} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.Wrapper}
 */
proto.message.Wrapper.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.message.DirChange;
      reader.readMessage(value,proto.message.DirChange.deserializeBinaryFromReader);
      msg.setDirchange(value);
      break;
    case 2:
      var value = new proto.message.CreateBullet;
      reader.readMessage(value,proto.message.CreateBullet.deserializeBinaryFromReader);
      msg.setCreatebullet(value);
      break;
    case 3:
      var value = new proto.message.GameState;
      reader.readMessage(value,proto.message.GameState.deserializeBinaryFromReader);
      msg.setGamestate(value);
      break;
    case 4:
      var value = new proto.message.GameCount;
      reader.readMessage(value,proto.message.GameCount.deserializeBinaryFromReader);
      msg.setGamecount(value);
      break;
    case 5:
      var value = new proto.message.GameInit;
      reader.readMessage(value,proto.message.GameInit.deserializeBinaryFromReader);
      msg.setGameinit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.Wrapper.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.Wrapper.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.Wrapper} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.Wrapper.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDirchange();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.message.DirChange.serializeBinaryToWriter
    );
  }
  f = message.getCreatebullet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.message.CreateBullet.serializeBinaryToWriter
    );
  }
  f = message.getGamestate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.message.GameState.serializeBinaryToWriter
    );
  }
  f = message.getGamecount();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.message.GameCount.serializeBinaryToWriter
    );
  }
  f = message.getGameinit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.message.GameInit.serializeBinaryToWriter
    );
  }
};


/**
 * optional DirChange dirChange = 1;
 * @return {?proto.message.DirChange}
 */
proto.message.Wrapper.prototype.getDirchange = function() {
  return /** @type{?proto.message.DirChange} */ (
    jspb.Message.getWrapperField(this, proto.message.DirChange, 1));
};


/**
 * @param {?proto.message.DirChange|undefined} value
 * @return {!proto.message.Wrapper} returns this
*/
proto.message.Wrapper.prototype.setDirchange = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.message.Wrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Wrapper} returns this
 */
proto.message.Wrapper.prototype.clearDirchange = function() {
  return this.setDirchange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Wrapper.prototype.hasDirchange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CreateBullet createBullet = 2;
 * @return {?proto.message.CreateBullet}
 */
proto.message.Wrapper.prototype.getCreatebullet = function() {
  return /** @type{?proto.message.CreateBullet} */ (
    jspb.Message.getWrapperField(this, proto.message.CreateBullet, 2));
};


/**
 * @param {?proto.message.CreateBullet|undefined} value
 * @return {!proto.message.Wrapper} returns this
*/
proto.message.Wrapper.prototype.setCreatebullet = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.message.Wrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Wrapper} returns this
 */
proto.message.Wrapper.prototype.clearCreatebullet = function() {
  return this.setCreatebullet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Wrapper.prototype.hasCreatebullet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GameState gameState = 3;
 * @return {?proto.message.GameState}
 */
proto.message.Wrapper.prototype.getGamestate = function() {
  return /** @type{?proto.message.GameState} */ (
    jspb.Message.getWrapperField(this, proto.message.GameState, 3));
};


/**
 * @param {?proto.message.GameState|undefined} value
 * @return {!proto.message.Wrapper} returns this
*/
proto.message.Wrapper.prototype.setGamestate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.message.Wrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Wrapper} returns this
 */
proto.message.Wrapper.prototype.clearGamestate = function() {
  return this.setGamestate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Wrapper.prototype.hasGamestate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GameCount gameCount = 4;
 * @return {?proto.message.GameCount}
 */
proto.message.Wrapper.prototype.getGamecount = function() {
  return /** @type{?proto.message.GameCount} */ (
    jspb.Message.getWrapperField(this, proto.message.GameCount, 4));
};


/**
 * @param {?proto.message.GameCount|undefined} value
 * @return {!proto.message.Wrapper} returns this
*/
proto.message.Wrapper.prototype.setGamecount = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.message.Wrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Wrapper} returns this
 */
proto.message.Wrapper.prototype.clearGamecount = function() {
  return this.setGamecount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Wrapper.prototype.hasGamecount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GameInit gameInit = 5;
 * @return {?proto.message.GameInit}
 */
proto.message.Wrapper.prototype.getGameinit = function() {
  return /** @type{?proto.message.GameInit} */ (
    jspb.Message.getWrapperField(this, proto.message.GameInit, 5));
};


/**
 * @param {?proto.message.GameInit|undefined} value
 * @return {!proto.message.Wrapper} returns this
*/
proto.message.Wrapper.prototype.setGameinit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.message.Wrapper.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.message.Wrapper} returns this
 */
proto.message.Wrapper.prototype.clearGameinit = function() {
  return this.setGameinit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.message.Wrapper.prototype.hasGameinit = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.GameInit.prototype.toObject = function(opt_includeInstance) {
  return proto.message.GameInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.GameInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameInit.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.GameInit}
 */
proto.message.GameInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.GameInit;
  return proto.message.GameInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.GameInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.GameInit}
 */
proto.message.GameInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.GameInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.GameInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.GameInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.message.GameInit.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.GameInit} returns this
 */
proto.message.GameInit.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.DirChange.prototype.toObject = function(opt_includeInstance) {
  return proto.message.DirChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.DirChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.DirChange.toObject = function(includeInstance, msg) {
  var f, obj = {
angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
ismoved: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.DirChange}
 */
proto.message.DirChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.DirChange;
  return proto.message.DirChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.DirChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.DirChange}
 */
proto.message.DirChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsmoved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.DirChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.DirChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.DirChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.DirChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getIsmoved();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional float angle = 1;
 * @return {number}
 */
proto.message.DirChange.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.DirChange} returns this
 */
proto.message.DirChange.prototype.setAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional bool isMoved = 2;
 * @return {boolean}
 */
proto.message.DirChange.prototype.getIsmoved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.message.DirChange} returns this
 */
proto.message.DirChange.prototype.setIsmoved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.message.GameState.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.GameState.prototype.toObject = function(opt_includeInstance) {
  return proto.message.GameState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.GameState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameState.toObject = function(includeInstance, msg) {
  var f, obj = {
playerstateList: jspb.Message.toObjectList(msg.getPlayerstateList(),
    proto.message.PlayerState.toObject, includeInstance),
bulletstateList: jspb.Message.toObjectList(msg.getBulletstateList(),
    proto.message.BulletState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.GameState}
 */
proto.message.GameState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.GameState;
  return proto.message.GameState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.GameState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.GameState}
 */
proto.message.GameState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.message.PlayerState;
      reader.readMessage(value,proto.message.PlayerState.deserializeBinaryFromReader);
      msg.addPlayerstate(value);
      break;
    case 2:
      var value = new proto.message.BulletState;
      reader.readMessage(value,proto.message.BulletState.deserializeBinaryFromReader);
      msg.addBulletstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.GameState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.GameState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.GameState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.message.PlayerState.serializeBinaryToWriter
    );
  }
  f = message.getBulletstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.message.BulletState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlayerState playerState = 1;
 * @return {!Array<!proto.message.PlayerState>}
 */
proto.message.GameState.prototype.getPlayerstateList = function() {
  return /** @type{!Array<!proto.message.PlayerState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.message.PlayerState, 1));
};


/**
 * @param {!Array<!proto.message.PlayerState>} value
 * @return {!proto.message.GameState} returns this
*/
proto.message.GameState.prototype.setPlayerstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.message.PlayerState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.message.PlayerState}
 */
proto.message.GameState.prototype.addPlayerstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.message.PlayerState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.message.GameState} returns this
 */
proto.message.GameState.prototype.clearPlayerstateList = function() {
  return this.setPlayerstateList([]);
};


/**
 * repeated BulletState bulletState = 2;
 * @return {!Array<!proto.message.BulletState>}
 */
proto.message.GameState.prototype.getBulletstateList = function() {
  return /** @type{!Array<!proto.message.BulletState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.message.BulletState, 2));
};


/**
 * @param {!Array<!proto.message.BulletState>} value
 * @return {!proto.message.GameState} returns this
*/
proto.message.GameState.prototype.setBulletstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.message.BulletState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.message.BulletState}
 */
proto.message.GameState.prototype.addBulletstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.message.BulletState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.message.GameState} returns this
 */
proto.message.GameState.prototype.clearBulletstateList = function() {
  return this.setBulletstateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.PlayerState.prototype.toObject = function(opt_includeInstance) {
  return proto.message.PlayerState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.PlayerState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.PlayerState.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.PlayerState}
 */
proto.message.PlayerState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.PlayerState;
  return proto.message.PlayerState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.PlayerState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.PlayerState}
 */
proto.message.PlayerState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.PlayerState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.PlayerState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.PlayerState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.PlayerState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.message.PlayerState.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.PlayerState} returns this
 */
proto.message.PlayerState.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.message.PlayerState.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.PlayerState} returns this
 */
proto.message.PlayerState.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.message.PlayerState.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.PlayerState} returns this
 */
proto.message.PlayerState.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.CreateBullet.prototype.toObject = function(opt_includeInstance) {
  return proto.message.CreateBullet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.CreateBullet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.CreateBullet.toObject = function(includeInstance, msg) {
  var f, obj = {
playerid: jspb.Message.getFieldWithDefault(msg, 1, ""),
startx: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
starty: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
angle: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.CreateBullet}
 */
proto.message.CreateBullet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.CreateBullet;
  return proto.message.CreateBullet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.CreateBullet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.CreateBullet}
 */
proto.message.CreateBullet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStartx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setStarty(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.CreateBullet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.CreateBullet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.CreateBullet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.CreateBullet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayerid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getStarty();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string playerId = 1;
 * @return {string}
 */
proto.message.CreateBullet.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.CreateBullet} returns this
 */
proto.message.CreateBullet.prototype.setPlayerid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float startX = 2;
 * @return {number}
 */
proto.message.CreateBullet.prototype.getStartx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.CreateBullet} returns this
 */
proto.message.CreateBullet.prototype.setStartx = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float startY = 3;
 * @return {number}
 */
proto.message.CreateBullet.prototype.getStarty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.CreateBullet} returns this
 */
proto.message.CreateBullet.prototype.setStarty = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float angle = 4;
 * @return {number}
 */
proto.message.CreateBullet.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.CreateBullet} returns this
 */
proto.message.CreateBullet.prototype.setAngle = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.BulletState.prototype.toObject = function(opt_includeInstance) {
  return proto.message.BulletState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.BulletState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.BulletState.toObject = function(includeInstance, msg) {
  var f, obj = {
bulletid: jspb.Message.getFieldWithDefault(msg, 1, ""),
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.BulletState}
 */
proto.message.BulletState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.BulletState;
  return proto.message.BulletState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.BulletState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.BulletState}
 */
proto.message.BulletState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBulletid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.BulletState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.BulletState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.BulletState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.BulletState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBulletid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional string bulletId = 1;
 * @return {string}
 */
proto.message.BulletState.prototype.getBulletid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.message.BulletState} returns this
 */
proto.message.BulletState.prototype.setBulletid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float x = 2;
 * @return {number}
 */
proto.message.BulletState.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.BulletState} returns this
 */
proto.message.BulletState.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float y = 3;
 * @return {number}
 */
proto.message.BulletState.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.message.BulletState} returns this
 */
proto.message.BulletState.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.message.GameCount.prototype.toObject = function(opt_includeInstance) {
  return proto.message.GameCount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.message.GameCount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameCount.toObject = function(includeInstance, msg) {
  var f, obj = {
count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.message.GameCount}
 */
proto.message.GameCount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.message.GameCount;
  return proto.message.GameCount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.message.GameCount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.message.GameCount}
 */
proto.message.GameCount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.message.GameCount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.message.GameCount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.message.GameCount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.message.GameCount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 count = 1;
 * @return {number}
 */
proto.message.GameCount.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.message.GameCount} returns this
 */
proto.message.GameCount.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.message);
